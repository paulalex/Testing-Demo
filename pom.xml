<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>uk.gov</groupId>
	<artifactId>hscic</artifactId>
	<name>MockitoTests</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	<properties>
		<java-version>1.7</java-version>
		
		<!-- Dependency versions -->
		<org.springframework-version>3.2.7.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
		
		<!-- PLUGIN versions -->
		<cargo.version>1.2.0</cargo.version>
		<surefire.version>2.15</surefire.version>
		<failsafe.version>2.12</failsafe.version>
		<phantomjs-maven-plugin.version>0.7</phantomjs-maven-plugin.version>
		<jacoco.version>0.7.5.201505241946</jacoco.version>
		<maven-compiler-plugin-version>2.5.1</maven-compiler-plugin-version>
		
		<!-- Version of phantom js binary file -->
		<phantomjs-binary.version>2.1.1</phantomjs-binary.version>
		
		<!-- Jacoco configuration -->
		<jacoco-unit-test-exec-path>${project.build.directory}/coverage-reports/jacoco-ut.exec</jacoco-unit-test-exec-path>	
		<jacoco-unit-test-report-directory>${project.reporting.outputDirectory}/jacoco-unit-tests</jacoco-unit-test-report-directory>
		<jacoco-IT-test-exec-path>${project.build.directory}/coverage-reports/jacoco-it.exec</jacoco-IT-test-exec-path>
		<jacoco-IT-test-report-directory>${project.reporting.outputDirectory}/jacoco-int-tests</jacoco-IT-test-report-directory>
		
		<!-- Cargo configuration -->
		<tomcat-download-url>http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.16/bin/apache-tomcat-7.0.16.zip</tomcat-download-url>	
		<cargo-tomcat-port>10001</cargo-tomcat-port>			  
	</properties>

	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>[2.3.0,2.3.99]</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>[2.3.0,2.3.99]</version>
		</dependency>

		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
			
			<!-- Exclude the Hamcrest core package that comes with JUNIT -->
			
			<exclusions>
				<exclusion>
					<artifactId>hamcrest-core</artifactId>
					<groupId>org.hamcrest</groupId>
				</exclusion>
			</exclusions>
		</dependency>		
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path-assert</artifactId>
			<version>0.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.detro</groupId>
			<artifactId>phantomjsdriver</artifactId>
			<version>1.2.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>0.7.6.201602180812</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.name}</finalName>
					
		<plugins>
			<plugin>
				<groupId>org.eclipse.m2e</groupId>
				<artifactId>lifecycle-mapping</artifactId>
				<version>1.0.0</version>
				<configuration>
					<lifecycleMappingMetadata>
						<pluginExecutions>
							<pluginExecution>
								<pluginExecutionFilter>
									<groupId>
										com.github.klieber
									</groupId>
									<artifactId>
										phantomjs-maven-plugin
									</artifactId>
									<versionRange>[0.4,)</versionRange>
									<goals>
										<goal>install</goal>
									</goals>
								</pluginExecutionFilter>
								<action>
									<execute></execute>
								</action>
							</pluginExecution>
						</pluginExecutions>
					</lifecycleMappingMetadata>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin-version}</version>
				<configuration>
					<source>${java-version}</source>
					<target>${java-version}</target>
					<compilerArgument>-Xlint:all</compilerArgument>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>
			
			<!-- Added by STS (unsure if this is necessary) -->
			
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<configuration>
					<mainClass>org.test.int1.Main</mainClass>
				</configuration>
			</plugin>
			
			<!-- Jacoco code coverage plugin for maven  -->
			
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
				
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven Surefire plugin is executed. 
						
						Prepare agent is by default bound to the maven default life cycle
						initialize phase
						-->
						
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
						
							<!-- Sets the path to the file which contains the execution data. -->
							
							<destFile>${jacoco-unit-test-exec-path}</destFile>
							
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent.
								
								This is so the surefire plugin knows where the UT jacoco exec file is
									
							 -->
								
							<propertyName>surefireArgLine</propertyName>
							<includes>
								<include>uk/gov/**</include>
							</includes>
						</configuration>
					</execution>
					
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
						
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
						
							<!-- Sets the path to the file which contains the execution data. -->
							
							<dataFile>${jacoco-unit-test-exec-path}</dataFile>
							
							<!-- Sets the output directory for the code coverage report. -->
							
							<outputDirectory>${jacoco-unit-test-report-directory}</outputDirectory>
						</configuration>
					</execution>
					
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when the Maven Failsafe plugin is executed.
						
						Prepare agent is by default bound to the maven default life cycle
						initialize phase
						 -->
						 
					<execution>
						<id>pre-integration-test</id>
						<phase>validate</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
						
							<!-- Sets the path to the file which contains the execution data. -->
							
							<destFile>${jacoco-IT-test-exec-path}</destFile>
							<includes>
								<include>uk/gov/**</include>
							</includes>
							
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. 
								
								This is so the failsafe plugin knows where the IT jacoco exec file is.								
							-->
								
							<propertyName>failsafeArgLine</propertyName>												
						</configuration>
					</execution>
					
					<!-- By default the prepare-agent-integration goal is bound to the pre-integration-test
						phase of the maven default life cycle. -->
						
					<execution>
                        <id>default-prepare-agent-integration</id>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>                        
                    </execution>
                    	
                    <!-- By default the jacoco:report goal is bound
                    	to the verify phase of the default life cycle
                     -->	
                     			
					<execution>
						<id>post-integration-test</id>
						<phase>verify</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco-IT-test-exec-path}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${jacoco-IT-test-report-directory}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- Installs PhantomJS so it doesn't have to be pre-installed -->
			
			<plugin>
				<groupId>com.github.klieber</groupId>
				<artifactId>phantomjs-maven-plugin</artifactId>
				<version>${phantomjs-maven-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>install</goal>
						</goals>
					</execution>
				</executions>
				<!-- The version of phantom js -->
				<configuration>
					<version>${phantomjs-binary.version}</version>
				</configuration>
			</plugin>
			
			<!-- Sure fire unit test plugin configuration -->
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire.version}</version>
				<configuration>
				
					<!-- Sets the jacoco VM argument line used when unit tests are run. -->
					
					<argLine>${surefireArgLine}</argLine>
					
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					
					<skipTests>${skip.unit.tests}</skipTests>
					
					<!-- Excludes integration tests when unit tests are run. -->
					
					<excludes>
						<exclude>**/IT*.java</exclude>
					</excludes>
				</configuration>
			</plugin>					

			<!-- Maven Cargo Plugin - starts tomcat or jetty for integration tests -->
			
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>${cargo.version}</version>
				<configuration>
					<type>standalone</type>
					<skip>${skip.integration.tests}</skip>
					
					<!-- Install apache tomcat into the target directory -->
					
					<container>
						<containerId>tomcat7x</containerId>
						<zipUrlInstaller>
							<url>${tomcat-download-url}</url>
							<downloadDir>${project.build.directory}/downloads</downloadDir>
							<extractDir>${project.build.directory}/extracts</extractDir>
						</zipUrlInstaller>						
					</container>
					
					<!-- The artefact we are deploying to tomcat - in this
						case it is the war file we just created
					 -->
					 
					<deployables>
            			<deployable>
	              			<groupId>${project.groupId}</groupId>
	              			<artifactId>${project.artifactId}</artifactId>
	              			<type>war</type>				           
            			</deployable>
          			</deployables>									
				</configuration>
				
				<!-- Start tomcat and deploy the artefact before integration tests run -->

				<executions>
					<execution>
						<id>start container</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<configuration>
								<properties>
									<cargo.jvmargs>${failsafeArgLine}</cargo.jvmargs>							
									<cargo.servlet.port>${cargo-tomcat-port}</cargo.servlet.port>											
								</properties>
							</configuration>
						</configuration>												               
					</execution>
					
					<!-- Stop tomcat once integration tests have finished -->
					
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>	
			
			<!-- Failsafe Plugin for integration testing:
				
				The verify phase is used for checking the results of
				any integration tests
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${failsafe.version}</version>
				<executions>
					<execution>
						<id>default</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
				
					<!-- Sets the jacoco VM argument line used when integration tests are run. -->
					
					<argLine>${failsafeArgLine}</argLine>
					
					<!-- Skips integration tests if the value of skip.integration.tests 
						property is true -->
						
					<skipTests>${skip.integration.tests}</skipTests>
					
					<!-- Set the path to the phantom js binary file
						which is used to act as a headless browser when running
						selenium driven integration tests:
						
						See setPhantomJSDriver() method in GeneralIT.java						
					 -->
					 
					<systemPropertyVariables>
						<phantomjs.binary>${phantomjs.binary}</phantomjs.binary>
					</systemPropertyVariables>
					    <includes>
      						<include>**/*IT*</include>
    					</includes>					
				</configuration>				
			</plugin>					
		</plugins>		
	</build>
</project>
